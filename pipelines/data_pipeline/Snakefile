'''
A snakemake file to run the RCPA WGS PTP data qc pipeline
'''

import pathlib
import pandas as pd


def new_toml(output):
    p = pathlib.Path(output)
    p.touch()


def toml_files(wildcards):
    sample = wildcards.sample
    return [f"{sample}/{f}.toml" for f in ['read_assessment', 'trimmed_reads', 'species', 'assembled_reads', 'asm_assessment', 'mlst', 'serotyping', 'amr']]


def load_tab(filename, sample_type):
    tab = pd.read_csv(filename, engine="python", sep=None)
    tab = tab.query(f"SAMPLE_TYPE == '{sample_type}'")
    tab = tab.set_index("SAMPLE_ID", drop=False)
    return tab


def get_fastq(wildcards):
    sample_id = wildcards.sample
    return sample.loc[sample_id][["R1", "R2"]].to_list()


sample = load_tab(config['input'], 'data')

rule all:
    input: "data.toml"

rule read_assessment:
    input: get_fastq
    output: temp("{sample}/read_assessment.toml")
    benchmark: "{sample}/read_assessment_benchmark.txt"
    singularity: "../singularity_images/read_assessment.simg"
    params:
        file_type = config['ra_file_type']
    script:
        "../scripts/read_assessment.py"

rule trim_reads:
    input: "{sample}/read_assessment.toml"
    output: temp("{sample}/trimmed_reads.toml")
    benchmark: "{sample}/trimmed_reads_benchmark.txt"
    singularity: "../singularity_images/read_assessment.simg"
    params:
        min_qual = config['trim_min_qual'],
        file_type = config['trim_file_type']
    threads: config['trim_threads']
    script:
        "../scripts/trim_reads.py"

rule trimmed_read_assessment:
    input: "{sample}/trimmed_reads.toml"
    output: temp("{sample}/trimmed_reads_assessment.toml")
    benchmark: "{sample}/trimmed_read_assessment_benchmark.txt"
    singularity: "../singularity_images/read_assessment.simg"
    params:
        file_type = config['tra_file_type']
    script:
        "../scripts/read_assessment.py"

rule run_kraken:
    input: "{sample}/trimmed_reads_assessment.toml"
    output: temp("{sample}/species.toml")
    benchmark: "{sample}/species_benchmark.txt"
    singularity: "../singularity_images/kraken2.simg"
    params:
        file_type = config['kraken_file_type'],
        kraken_opts = config['kraken_opts']
    threads: config['kraken_threads']
    script:
        "../scripts/run_kraken2.py"

rule estimate_genome_size:
    input: "{sample}/species.toml"
    output: temp("{sample}/genome_size.toml")
    benchmark: "{sample}/genome_size_benchmark.txt"
    singularity: "../singularity_images/kmer_counters.simg"
    params:
        file_type = config['egs_file_type'],
        min_kmer_count = config['egs_min_kmer_count'],
        kmer_len = config['egs_kmer_len'],
        mash_opts = config['egs_mash_opts']
    script:
        "../scripts/estimate_genome_size.py"

rule assemble_reads:
    input: "{sample}/genome_size.toml"
    output: temp("{sample}/assembled_reads.toml")
    benchmark: "{sample}/assembly_benchmark.txt"
    singularity: "../singularity_images/asm.simg"
    params:
        assembler = "shovill",
        file_type = config['asm_file_type'],
        memory = config['asm_memory'],
        asm_opts = config['asm_shovill_opts']
    threads: config['asm_threads']
    script:
        "../scripts/assemble_reads.py"

rule assembly_assessment:
    input: "{sample}/assembled_reads.toml"
    output: temp("{sample}/asm_assessment.toml")
    singularity: "../singularity_images/asm_assessment.simg"
    params:
        file_type = config['aa_file_type'],
        assembler = config['aa_assembler'],
        quast_opts = config['aa_quast_opts']
    threads: config['aa_threads']
    benchmark: "{sample}/asm_assessment_benchmark.txt"
    script:
        "../scripts/run_asm_assessment.py"

rule run_mlst:
    input: "{sample}/asm_assessment.toml"
    output: temp("{sample}/mlst.toml")
    benchmark: "{sample}/mlst_benchmark.txt"
    singularity: "../singularity_images/mlst.simg"
    params:
        assembler = "shovill",
        mlst_opts = ""
    script:
        "../scripts/run_mlst.py"

rule run_serotyping:
    input: "{sample}/mlst.toml"
    output: temp("{sample}/serotyping.toml")
    singularity: "../singularity_images/serotyping.simg"
    benchmark: "{sample}/serotyping_benchmark.txt"
    threads: config['sero_threads']
    params:
        assembler = config['sero_assembler'],
        sistr_opts = config['sero_sistr_opts']
    script:
        "../scripts/run_serotyping.py"

rule run_amr:
    input: "{sample}/serotyping.toml"
    output: temp("{sample}/amr.toml")
    benchmark: "{sample}/abricate_benchmark.txt"
    singularity: "../singularity_images/abricate.simg"
    params:
        assembler = config['abr_assembler'],
        db = config['abr_db'],
        abricate_opts = config['abr_opts']
    script:
        "../scripts/run_abricate.py"

rule gather_toml:
    input: expand("{sample}/amr.toml", sample=sample.index)
    output: "data.toml"
    run:
        shell(f"cat {' '.join(input)} >> {output[0]}")
